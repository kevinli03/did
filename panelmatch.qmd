# PanelMatch {.unnumbered}

::: small
R package for PanelMatch DiD estimator (Imai, Kim, and Wang 2023)
:::

**PanelMatch** is a package that implements the PanelMatch estimator by Imai, Kim, and Wang (2023) that solves the bias of the TWFE estimator in staggered and non-absorbing DiD. Documentation can be found [here](https://cran.r-project.org/web/packages/PanelMatch/PanelMatch.pdf).

Install the package as follows:

```{r}
#| eval: false

install.packages('PanelMatch')
```

------------------------------------------------------------------------

#### sample code

Start by loading packages and the data:

```{r}
#| message: false
#| warning: false

library(PanelMatch)
library(readr)  # for importing data
df = read_csv('df.csv')
```

<br />

PanelMatch requires us to pre-process the data with the `PanelData()` function:

::: small
Note: `id` variable should be transformed to an integer variable before starting.
:::

```{r}
#| message: false
#| warning: false

# PanelMatch dislikes tidyverse df's, so do this:
df = df |> as.data.frame()

df.panel = PanelData(
  panel.data  = df,        # your data
  unit.id     = "id",      # your unit var (integer only)
  time.id     = "time",    # your time period var (integer only)
  treatment   = "treat",   # your treatment var
  outcome     = "outcome"  # your outcome var
)
```

<br />

Now, we can run the PanelMatch matching process with `PanelMatch()` to match based on lag-period pre-history:

::: small
Lag refers to periods **before** the treatment in which to match on. Leads refer to periods **after** the treatment on which to estimate.
:::

```{r}
#| message: false
#| warning: false

match = PanelMatch(
  lag                = 4,              # number of pre-periods to match treat history
  panel.data         = df.panel,       # PanelData generated data
  lead               = c(0:3),         # how many post-treat dynamic effects to estimate
  qoi                = "att",
  refinement.method  = "mahalanobis",  # set to "none" if no covariates
  match.missing      = T,
  covs.formula       = ~ covar,        # (optional, can exclude)
  placebo.test       = T               # (optional, but may cause issues)
)
```

<br />

To aggregate all the matched comparisons into a singular ATT, we use the `PanelEstimate()` function.

```{r}
#| comment: "#>"
#| class-output: r

match |>
  PanelEstimate(
    panel.data = df.panel,  # PanelData object
    pooled     = T,         # tells R to calculate ATT
    moderator  = NULL       # optional. character string for var to calculate heterogenous effects
  ) |>
  print()
```

The `Point estimates` are the estimated ATT, and the standard errors are provided.

<br />

We can estimate dynamic treatment effects with the `PanelEstimate()` function:

```{r}
#| comment: "#>"
#| class-output: r
#| message: false
#| fig-height: 3.5
#| fig-align: center

match |>
  PanelEstimate(
    panel.data = df.panel,  # PanelData object
    pooled     = F          # tells R to calculate dynamic effects
  ) |>
  plot(
    ylab = "Estimate",            # y-axis label
    xlab = "Time to Treatment",   # x-axis label
    main = "Dynamic Effects"      # title of plot
  )
```

<br />

We can conduct pre-treatment period placebo tests (pre-treatment effects to test for parallel trends) as well. These are done with the `placebo_test()` function.

```{r}
#| results: hold
#| fig-height: 3.5
#| fig-align: center

match |> placebo_test(
  panel.data = df.panel,  # PanelData object
  lag.in     = 4,         # should equal lag in PanelMatch()
  plot       = T
)
```

Note: the estimate for the last pre-treatment period (t-1) is always 0, so it is not displayed.
