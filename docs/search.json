[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Difference-in-Differences (DiD) Resources",
    "section": "",
    "text": "Welcome!\nThis repository is a collection of resources on Difference-in-Differences (DiD) packages in R and Python (and Julia coming soon). Use the left sidebar to navigate between pages.\nLectures/Overview on DiD (from my lectures on causal inference):\n\nExogeneity (Background for DiD and causal inference)\nPotential Outcomes (Background for DiD and causal inference)\nClassical DiD\nGeneralised DiD\nStaggered DiD\nExtensions to DiD\n\n\n\n\nTypes of DiD\n\n\n\n\n\n\n\n\n\nNon-Staggered\nStaggered\n\n\nAbsorbing\nAll units that get treatment begin treatment in the same period.\nOnce a unit is treated, they remain treated for the duration of the study.\nUnits that get treatment begin treatment in different periods (staggered adoption).\nOnce a unit is treated, they remain treated for the duration of the study.\n\n\nNon Absorbing\nAll units that get treatment begin treatment in the same period.\nA treated unit may become untreated after already receiving the treatment.\nUnits that get treatment begin treatment in different periods (staggered adoption).\nA treated unit may become untreated after already receiving the treatment.\n\n\n\n\n\n\nIdentification Assumptions\nFor a quick review, these are the identification assumptions for DiD.\n\n\n\n\n\n\n\n\nAssumption\nDescription\nTesting/Dealing With\n\n\n\n\nParallel Trends Assumption\nHad the treated group not received the treatment, they would have followed the same trend in outcomes as the never-treated group.\nWe can test parallel trends by looking at pre-treatment dynamic treatment effects. If the pre-treatment effects are significantly different than 0, that is evidence against parallel trends.\nWe can address this using conditional parallel trends - parallel trends met when conditioning on covariates with differing trends.\n\n\nNo Anticipation\nThe treated group’s outcome variables do not respond to treatment before treatment officially begins.\nTesting is done theoretically.\nWe address this by altering the treatment variable (move forward/backward) to match the anticipation structure.\n\n\nStable Unit Treatment Value (SUTVA)\nOne unit’s treatment status does not affect the potential outcomes of another unit.\nTesting is done theoretically.\nVery little can be done to address this.\n\n\nStable Group Composition\n(Repeated cross-section only). The sample from each time period is consistent in terms of composition of confounders.\nTesting can be done with balance tests.\nWe can address this issue by controlling for confounders that differ between different samples.\n\n\n\n\n\n\nAdditional Resources\n\n\n\nResource\nAuthor\nNotes\n\n\n\n\nYiqing Xu: modern advancements in DiD\nYiqing Xu\nUseful overview of all modern DiD methods and R code.\n\n\nAsjad Naqvi: repository on DiD\nAsjad Naqvi\nUseful R and state code for DiD.\n\n\nUser Guides for DiD\nBrantly Callaway\nUseful guides and explanations of DiD with R.\n\n\nLecture: Problems with TWFE\nPedro Sant’Anna\nBacon decomposition and introduction to csdid.\n\n\nCausal Inference: The Mixtape\nScott Cunningham\nTextbook chapter introducing DiD.\n\n\nChiu et al (2025)\nChiu et al\nPaper exploring new DiD methods and reanalysing old polisci papers.\n\n\nRoth et al (2025)\nRoth et al\nAn overview of new DiD methods.\n\n\nLiu et al (2025)\nLiu et al\nAn overview of imputation DiD methods.\n\n\n\n\n\n\nAcknowledgements\nThis repository was created to help me collect all that I had learned about DiD together into one place. I hope this can be helpful for others.\nI would like to thank the following individuals for teaching me so much about DiD and causal inference during my Master’s degree at LSE:\n\nDr. Daniel de Kadt\nDr. Aliz Toth",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "var.html",
    "href": "var.html",
    "title": "Information",
    "section": "",
    "text": "In the subsequent sample code, the dataframe df I use contains the following variables:\n\nNot all variables are required for each estimator.\n\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nid\nA variable indicating the units/individual an observation belongs to in our data.*\n\n*For repeated cross-section, the id variable should be instead the group/level of which treatment is assigned. For example, if treatment is assigned by county/state, use that as the id variable.\n\n\n\ntime\nA variable indicating time-periods in our study for each observation.\n\n\noutcome\nOutcome variable for each observation.\n\n\ntreat\nTreatment variable for each observation. Should equal 1 for treated units and 0 for untreated units.\n\n\nrel.time\nA relative time variable that indicates for the given period \\(t\\) of an observation, how many time-periods away did the unit \\(i\\) first get the treatment. For example, if unit \\(i\\) is treated in 2005, and the observation \\(it\\) is from 2003, the relative time would be -2.** This means rel.time = 0 at the initial year of treatment for unit \\(i\\).\n\n** A common question is regarding never-treated units. Generally, we do not set rel.time to NA for observations that never get treated. This can cause issues with estimation. We generally either 1) set it to a large or small number not in the range of the time variable, or 2) set it to 0 (as in csdid).\n\n\n\ngroup\nVariable specifying if a unit is part of the treatment group or never-treated (control group). For units never receiving treatment, they get value 0, and for units that do end up receiving treatment sometime within the study, they get value 1.\n\nThis is different from treat. For never-treated units, treat = group always. But for units who at sometime receive treatment, group = 1 for all time periods (including periods before receiving treatment). treat = 1 is only after receiving treatment, treat = 0 is before receiving treatment.\n\n\n\ncovar\n(optional) covariate(s) to condition for parallel trends.",
    "crumbs": [
      "Information"
    ]
  },
  {
    "objectID": "panelview.html",
    "href": "panelview.html",
    "title": "panelView",
    "section": "",
    "text": "R package for DiD visualisations and panel analysis\n\npanelView is a package that visualises treatment adoption and outcome variables for panel data. It is useful for understanding our data before beginning difference-in-differences analysis. Documentation can be found here.\nInstall the package as follows:\n\ninstall.packages('panelView')\n\n\n\nsample code\nStart by loading the packages and the data:\n\nlibrary(panelView)\nlibrary(readr)  # for importing data\ndf = read_csv('df.csv')\n\n\nWe use the panelview() function to create a visualisation of treatment adoption.\n\npanelview(\n  data        = df,\n  formula     = outcome ~ treat,\n  type        = \"treat\",          # don't change - this is not the treat var, but an option\n  index       = c(\"id\", \"time\"),\n  gridOff     = T,\n  background  = \"white\",\n  main        = \"Status\",         # title of plot\n  xlab        = \"Time Period\",    # x-axis label\n  ylab        = \"Unit\",           # y-axis label\n  cex.axis.y  = 2                 # size of y-axis names\n)\n\n\n\n\n\n\n\n\nWe can see here, that our treatment is staggered, with the first group receiving treatment in time period 2, and some units receiving treatment in every subsequent period.\nWe also can use the panelview() function to visualise the outcome variable over time.\n\npanelview(\n  data          = df,\n  formula       = outcome ~ treat,  # change to outcome ~ 1 to ignore treat colorcoding\n  type          = \"outcome\",        # don't change, this is not a variable, but an option\n  index         = c(\"id\", \"time\"),\n  pre.post      = F,                # you can try T and see which you like  \n  outcome.type  = \"continuous\",     # change to \"discrete\" if outcome is binary\n  gridOff       = T,\n  background    = \"white\",\n  main          = \"Status\",         # title\n  xlab          = \"Time Period\",    # x-axis label\n  ylab          = \"Outcome Value\",  # y-axis label\n  cex.axis.y    = 2                 # size of y-axis names\n)",
    "crumbs": [
      "panelView"
    ]
  },
  {
    "objectID": "fixest.html",
    "href": "fixest.html",
    "title": "fixest",
    "section": "",
    "text": "R package for TWFE and Interaction-Weighted (Sun and Abraham 2021)\n\nfixest (and companion ggfixest) is a package for regressions targeted toward econometrics. For DiD, fixest allows the implementation of a basic TWFE model, as well as the Sun and Abraham (2021) interaction-weighted estimator. Documentation can be found here.\nInstall the package as follows:\n\ninstall.packages('fixest')\ninstall.packages('ggfixest')\n\n\n\nsample code\nStart by loading packages and the data:\n\nlibrary(fixest)\nlibrary(ggfixest)\nlibrary(readr)  # for importing data\ndf = read_csv('df.csv')\n\n\nWe use the feols() function to run the TWFE model.\n\nmod = feols(\n  fml   = outcome ~ treat + covar | id + time,  # covar is optional\n  data  = df,                                   # your data\n  vcov  = ~ id                                  # cluster SE by unit\n)\nmod |&gt; summary()\n\n#&gt; OLS estimation, Dep. Var.: outcome\n#&gt; Observations: 950\n#&gt; Fixed-effects: id: 95,  time: 10\n#&gt; Standard-errors: Clustered (id) \n#&gt;       Estimate Std. Error  t value  Pr(&gt;|t|)    \n#&gt; treat -3.68310   0.361071 -10.2005 &lt; 2.2e-16 ***\n#&gt; covar  1.01833   0.032416  31.4142 &lt; 2.2e-16 ***\n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; RMSE: 1.60906     Adj. R2: 0.691054\n#&gt;                 Within R2: 0.623425\n\n\n\nWe use the feols() function to run the TWFE event study for dynamic treatment effects.\n\nmod = feols(\n  fml   = outcome ~ i(rel.time, group, ref = -1) + covar | id + time,  # group = treat/never-treat\n  data  = df,                                                          # your data\n  vcov  = ~ id                                                         # cluster SE by unit\n)\nmod |&gt; ggiplot(\n  xlab    = \"Time Relative to Treatment\",  # x-axis label\n  ylab    = \"Dynamic ATT Estimate\",        # y-axis label\n  main    = \"Dynamic Treatment Effects\",   # title for plot\n) +\n  xlim(-8, 8) # select how many periods to display\n\n\n\n\n\n\n\n\nWe add the sunab() function within feols() to implement the staggered DiD “Interaction-Weighted” estimator proposed by Sun and Abraham (2020).\n\nNote: The cohort value for never-treated units should be a very large or very small number outside of the range of time.\n\n\nmod = feols(\n  fml = outcome ~ sunab(cohort, time) + covar | id + time,  # covar is optional\n  data = df,\n  vcov = ~ id                                               # clusters se by unit (id)\n)\nmod |&gt;\n  aggregate(agg  = \"att\") |&gt;  # agg can also be \"group\" or \"dynamic\"\n  print()\n\n#&gt;      Estimate Std. Error   t value     Pr(&gt;|t|)\n#&gt; ATT -1.133749  0.2050705 -5.528584 2.882038e-07\n\n\n\nAnd we can plot the Sun and Abraham event study using the ggiplot() function.\n\nmod |&gt; ggiplot(\n  xlab    = \"Time Relative to Treatment\",       # x-axis label\n  ylab    = \"Dynamic ATT Estimate\",             # y-axis label\n  main    = \"Dynamic Treatment Effects (IW)\",   # title for plot\n) + \n  xlim(-8, 8)                                   # how many periods to include.",
    "crumbs": [
      "fixest"
    ]
  },
  {
    "objectID": "bacon.html",
    "href": "bacon.html",
    "title": "bacondecomp",
    "section": "",
    "text": "R package for understanding bias of TWFE in staggered settings\n\nWhen the TWFE estimator is used in staggered DiD, the estimated \\(\\hat\\tau_\\text{TWFE}\\) can be biased. The bacondecomp package decomposes the TWFE estimator and illustrates why it is biased. Documentation can be found here.\nInstall the packages as follows:\n\ninstall.packages('bacondecomp')\n\n\n\nsample code\nStart by loading packages and data.\n\nlibrary(bacondecomp)\nlibrary(ggplot2)    # for plotting\nlibrary(readr)      # for importing data\ndf = read_csv('df.csv')\n\n\nWe start by breaking down the TWFE into its comparisions \\(\\hat\\beta\\) with bacon decomposition. We use the bacon() function to implement this:\n\ndecomp = bacon(\n  formula   = outcome ~ treat,  # match TWFE variables\n  data      = df,\n  id_var    = \"id\",             # match TWFE fixed effect\n  time_var  = \"time\"            # match TWFE fixed effect\n)\ndecomp |&gt; head()  # head() because a lot of comparisons\n\n#&gt;                       type  weight  avg_est\n#&gt; 1 Earlier vs Later Treated 0.14286 -2.45996\n#&gt; 2 Later vs Earlier Treated 0.14286 -8.48458\n#&gt; 3     Treated vs Untreated 0.71429 -2.66575\n#&gt;   treated untreated  estimate     weight                 type\n#&gt; 2      10     99999 -8.827665 0.03896104 Treated vs Untreated\n#&gt; 3       9     99999 -7.787725 0.06926407 Treated vs Untreated\n#&gt; 4       8     99999 -3.986033 0.09090909 Treated vs Untreated\n#&gt; 5       7     99999 -4.629684 0.10389610 Treated vs Untreated\n#&gt; 6       6     99999 -3.274153 0.10822511 Treated vs Untreated\n#&gt; 7       5     99999 -1.531851 0.10389610 Treated vs Untreated\n\n\nWe can see the top output is a summary of the general comparisons, while the bottom output is the top 6 rows of all the individual \\(\\hat\\beta\\) comparisons. We can also see Later vs. Earlier (already) treated is a comparison here, which is a forbidden comparison, biasing our estimates.\n\nWe can plot the estimates and weights of all the comparisons to better understand what each comparison’s value is, and how they are weighted.\n\ndecomp |&gt;\n  ggplot(aes(x = weight, y = estimate, shape = type, col = type)) +  # don't change\n  geom_point() +\n  theme_bw() +\n  labs(\n    x      = \"Weights\",\n    y      = \"Estimates\",\n    shape  = \"Type\",\n    col    = \"Type\",\n    title  = \"Decomposition of TWFE\"\n  )\n\n\n\n\n\n\n\n\nThe green highlighted comparisons all involve earlier (already) treated units being used as control units, which is nonsensical. Bacon decomposition thus shows us the perils of relying on TWFE for staggered treatment.\nWe know that any negative weights of any comparisons \\(\\hat\\beta\\) are non-sensical. The graph also allows us to check this. In this example, there are no negative weights.",
    "crumbs": [
      "bacondecomp"
    ]
  },
  {
    "objectID": "did.html",
    "href": "did.html",
    "title": "did",
    "section": "",
    "text": "R package for doubly-robust and ipw DiD estimator (callaway and sant’anna 2021)\n\ndid is a package that implements the DiD estimators proposed by Callaway and Sant’Anna (2021) that solves the bias of the TWFE estimator in staggered DiD. Documentation can be found here.\nInstall the package as follows:\n\ninstall.packages('did')\n\n\n\nsample code\nStart by loading packages and the data:\n\n# packages needed:\nlibrary(did)\nlibrary(readr)  # for importing data\ndf = read_csv('df.csv')\n\n\nWe use the att_gt() function to run the matching process of csdid:\n\nNote: id variable should be transformed to an integer variable before starting. Set cohort = 0 for never-treated units.\n\n\nmod = att_gt(\n  # required arguments\n  yname                   = \"outcome\",\n  tname                   = \"time\",\n  idname                  = \"id\",            # must be a integer-variable\n  gname                   = \"cohort\",        # cohort = 0 for never-treated\n  est_method              = \"dr\",            # change to ipw if you are having issues\n  base_period             = \"universal\",     # do not change\n  allow_unbalanced_panel  = T,               # generally good to keep this T\n  data                    = df,\n  xformla                 = ~ covar,        # (optional)\n  control_group           = \"nevertreated\",  # use \"notyettreated\" if sample size is small\n  panel                   = T                # change to F if you are using rep. cross-section\n)\n\n\nWe use the aggte() function to aggregate our matched treatment effects into an overall treatment effect.\n\nmod |&gt;\n  aggte(type  = \"simple\", na.rm = T) |&gt;\n  summary(att)\n\n#&gt; \n#&gt; Call:\n#&gt; aggte(MP = mod, type = \"simple\", na.rm = T)\n#&gt; \n#&gt; Reference: Callaway, Brantly and Pedro H.C. Sant'Anna.  \"Difference-in-Differences with Multiple Time Periods.\" Journal of Econometrics, Vol. 225, No. 2, pp. 200-230, 2021. &lt;https://doi.org/10.1016/j.jeconom.2020.12.001&gt;, &lt;https://arxiv.org/abs/1803.09015&gt; \n#&gt; \n#&gt; \n#&gt;      ATT    Std. Error     [ 95%  Conf. Int.]  \n#&gt;  -1.1237        0.5108    -2.1249     -0.1225 *\n#&gt; \n#&gt; \n#&gt; ---\n#&gt; Signif. codes: `*' confidence band does not cover 0\n#&gt; \n#&gt; Control Group:  Never Treated,  Anticipation Periods:  0\n#&gt; Estimation Method:  Doubly Robust\n\n\n\nWe can estimate dynamic treatment effects with the aggte() function and plot with the ggdid() function.\n\nmod |&gt;\n  aggte(type   = \"dynamic\", na.rm  = T) |&gt;\n  ggdid(\n    xlab    = \"Time to Treatment\",  # x-axis label\n    ylab    = \"Dynamic ATT\",        # y-axis label\n    title   = \"Dynamic Effects\"     # you can include a title string if you want\n  )\n\n\n\n\n\n\n\n\n\nWe can also aggregate effects by initial treatment period group, and with the ggdid() function:\n\nmod |&gt;\n  aggte(type   = \"group\", na.rm  = T) |&gt;\n  ggdid(\n    xlab    = \"ATT Estimate\",  # x-axis label\n    ylab    = \"Group\",         # y-axis label\n    title   = \"Group ATT\"      # you can include a title string if you want\n  )",
    "crumbs": [
      "did"
    ]
  },
  {
    "objectID": "fect.html",
    "href": "fect.html",
    "title": "fect",
    "section": "",
    "text": "R package for imputation estimators FEct, IFEct, and MC (Liu et al 2024)\n\nfect is a package that implements imputation DiD estimators proposed by Liu, Xu, and Wang (2024) that solves the bias of the TWFE estimator in staggered and non-absorbing DiD. fect also includes modern estimators (ifect, mc) that are semi-robust against parallel trends violations. Documentation can be found here.\nInstall the package as follows:\n\ninstall.packages('fect')\n\n\n\nsample code\nStart by loading packages and the data:\n\nlibrary(fect)\nlibrary(readr)  # for importing data\ndf = read_csv('df.csv')\n\n\nUse the fect() function to estimate models. To switch between the models, alter the method = argument.\n\nYou should generally start with fect, then see if parallel trends is met, before going to ifect and mc. If you use ifect and mc, set CV = T.\n\n\nmod = fect(\n  formula  = outcome ~ treat + covar,  # covar is optional\n  data     = df,\n  index    = c(\"id\", \"time\"),          # unit and time var\n  method   = \"fe\",                     # use \"fe\", \"ife\", or \"mc\"\n  CV       = F,                        # change to T for \"ife\" or \"mc\"\n  se       = T,                        # don't change\n  nboots   = 40,                       # usually you should use 200, larger is slower\n  seed     = 1239                      # any number will work\n)\n\nmod |&gt; print()\n\n#&gt; Call:\n#&gt; fect.formula(formula = outcome ~ treat + covar, data = df, index = c(\"id\", \n#&gt;     \"time\"), CV = F, method = \"fe\", se = T, nboots = 40, seed = 1239)\n#&gt; \n#&gt; ATT:\n#&gt;                              ATT   S.E. CI.lower CI.upper   p.value\n#&gt; Tr obs equally weighted   -1.091 0.4746   -2.022  -0.1611 2.148e-02\n#&gt; Tr units equally weighted -2.964 0.5814   -4.104  -1.8246 3.432e-07\n#&gt; \n#&gt; Covariates:\n#&gt;        Coef    S.E. CI.lower CI.upper p.value\n#&gt; covar 1.004 0.02042   0.9643    1.044       0\n\n\nThe output contains two different ATT estimates. It is typically conventional to use the first one, Tr obs equally weighted, which weights each observation \\(it\\) equally (rather than the second which weights all \\(i\\) equally).\n\nTo plot dynamic effects, we use the plot() function.\n\nmod |&gt; plot(\n  start0  = T,                    # don't change\n  main    = NULL,                 # title\n  ylab    = \"Estimate\",           # y-axis label\n  xlab    = \"Time to Treatment\",  # x-axis label\n  xlim    = c(-7, 7)              # what time periods to include (offset by +1)\n)\n\n\n\n\n\n\n\n\n\nWe can also plot the distributions of dynamic treatment effects as follows:\n\nmod |&gt; plot(\n  start0  = T,                    # don't change\n  type    = \"box\",                # don't change\n  main    = NULL,                 # title\n  ylab    = \"Estimate\",           # y-axis label\n  xlab    = \"Time to Treatment\",  # x-axis label\n  xlim    = c(-7, 7)              # what time periods to include (offset by +1)\n)\n\n\n\n\n\n\n\n\n\nThe fect package contains an F-test and equivalence test to test parallel trends, accessed through plot():\n\nmod |&gt; plot(\n  start0      = T,                    # don't change\n  type        = \"equiv\",\n  bound       = \"equiv\",\n  pre.period  = c(-4, 0),             # how many pre-treat coef to test\n  main        = NULL,                 # title\n  ylab        = \"Estimate\",           # y-axis label\n  xlab        = \"Time to Treatment\",  # x-axis label\n  xlim        = c(-7, 7)              # what time periods to include (offset by +1)\n)\n\n\n\n\n\n\n\n\n\nAn F-test tests if the joint combination of pre-treatment coefficients is statistically significantly different than 0. Since we do not want the coefficients to be different than 0, we want to get a high p-value and fail to reject the null.\nAn Equivalence (TOST) test tests if the confidence intervals of our pre-treatment coefficients are within 0.36 standard deviations of the outcome variable of 0. Essentially, it tests if there is a substantively significant deviation in parallel trends.",
    "crumbs": [
      "fect"
    ]
  },
  {
    "objectID": "didmultiple.html",
    "href": "didmultiple.html",
    "title": "DIDmultiplegtDYN",
    "section": "",
    "text": "R package for DIDmultiple estimator (de Chaisemartin and D’Haultfœuille 2024)\n\nDIDmultiplegtDYN is a package that implements the DIDmultiple estimator by de Chaisemartin and D’Haultfœuille (2024), that solves the issues with TWFE, handles non-absorbing and continuous treatments. Documentation can be found here.\nInstall the package as follows:\n\ninstall.packages('DIDmultiplegtDYN')\n\n\n\nsample code\nStart by loading packages and the data:\n\nlibrary(DIDmultiplegtDYN)\nlibrary(ggplot2)  # for plotting\nlibrary(readr)    # for importing data\ndf = read_csv('df.csv')\n\n\nWe use the did_multiplegt_dyn() function to complete the estimation process.\n\nIf you have a continuous or quasi-continuous treatment, or are having issues, set continuous = 1. Covariates for conditional parallel trends are possible to include, but they are used differently, and may cause issues.\n\n\nmod = did_multiplegt_dyn(\n  # required arguments\n  df          = df,\n  outcome     = \"outcome\",\n  group       = \"id\",       # Note: group here refers to unit, not cohort\n  time        = \"time\",\n  treatment   = \"treat\",\n  effects     = 4,          # Number of post-treatment periods dynamic effects\n  placebo     = 4,          # Number of pre-treatment periods of effects\n  controls    = NULL,       # optional, vector (string) of covariates.\n  continuous  = NULL,       # change to 1 if your treatment is true\n  graph_off   = T\n)\n\nmod |&gt; print()\n\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt;        Estimation of treatment effects: Event-study effects\n#&gt; ----------------------------------------------------------------------\n#&gt;              Estimate SE      LB CI    UB CI    N   Switchers\n#&gt; Effect_1     -5.04943 0.45371 -5.93869 -4.16017 675 45       \n#&gt; Effect_2     -3.25734 0.49253 -4.22269 -2.29199 580 40       \n#&gt; Effect_3     -2.17826 0.54482 -3.24609 -1.11044 490 35       \n#&gt; Effect_4     -0.03749 0.50608 -1.02940 0.95442  405 30       \n#&gt; \n#&gt; Test of joint nullity of the effects : p-value = 0.0000\n#&gt; ----------------------------------------------------------------------\n#&gt;     Average cumulative (total) effect per treatment unit\n#&gt; ----------------------------------------------------------------------\n#&gt;  Estimate        SE     LB CI     UB CI         N Switchers \n#&gt;  -2.89921   0.38159  -3.64711  -2.15131       780       150 \n#&gt; Average number of time periods over which a treatment effect is accumulated: 2.3333\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt;      Testing the parallel trends and no anticipation assumptions\n#&gt; ----------------------------------------------------------------------\n#&gt;              Estimate SE      LB CI    UB CI   N   Switchers\n#&gt; Placebo_1    0.27204  0.49208 -0.69242 1.23651 580 40       \n#&gt; Placebo_2    -0.72910 0.61928 -1.94287 0.48467 405 30       \n#&gt; Placebo_3    -0.27729 0.55098 -1.35720 0.80262 250 20       \n#&gt; Placebo_4    0.00895  1.00786 -1.96642 1.98433 115 10       \n#&gt; \n#&gt; Test of joint nullity of the placebos : p-value = 0.5860\n#&gt; \n#&gt; \n#&gt; The development of this package was funded by the European Union.\n#&gt; ERC REALLYCREDIBLE - GA N. 101043899\n\n\nThe Estimation of treatment effects: Event-study effects are the post-treatment dynamic effects. The Average cumulative (total) effect per treatment unit is the ATT estimate. The Testing the parallel trends and no anticipation assumptions is the pre-treatment coefficient estimates.\n\nWe can plot the dynamic treatment effects in a plot. The original estimation process already creates a (very flawed) plot, so we extract it and input it into ggplot.\n\n# assign plot to plot object\nplot = mod$plot\n\n# get rid of weird line in default plot\nplot$layers[[1]] &lt;- NULL\n\n# customise plot\nplot +\n  labs(title = \"Dynamic Treatment Effects\") +\n  xlab(\"Time to Treatment (t=1)\") + ylab(\"Estimate\") +\n  \n  # lines for treatment time and 0 treatment effect\n  geom_vline(xintercept = 0.5, linetype = 3) +\n  geom_hline(yintercept = 0, linetype = 3, color = \"red\") +\n  theme_classic()",
    "crumbs": [
      "DIDmultiplegtDYN"
    ]
  },
  {
    "objectID": "panelmatch.html",
    "href": "panelmatch.html",
    "title": "PanelMatch",
    "section": "",
    "text": "R package for PanelMatch DiD estimator (Imai, Kim, and Wang 2023)\n\nPanelMatch is a package that implements the PanelMatch estimator by Imai, Kim, and Wang (2023) that solves the bias of the TWFE estimator in staggered and non-absorbing DiD. Documentation can be found here.\nInstall the package as follows:\n\ninstall.packages('PanelMatch')\n\n\n\nsample code\nStart by loading packages and the data:\n\nlibrary(PanelMatch)\nlibrary(readr)  # for importing data\ndf = read_csv('df.csv')\n\n\nPanelMatch requires us to pre-process the data with the PanelData() function:\n\nNote: id variable should be transformed to an integer variable before starting.\n\n\n# PanelMatch dislikes tidyverse df's, so do this:\ndf = df |&gt; as.data.frame()\n\ndf.panel = PanelData(\n  panel.data  = df,        # your data\n  unit.id     = \"id\",      # your unit var (integer only)\n  time.id     = \"time\",    # your time period var (integer only)\n  treatment   = \"treat\",   # your treatment var\n  outcome     = \"outcome\"  # your outcome var\n)\n\n\nNow, we can run the PanelMatch matching process with PanelMatch() to match based on lag-period pre-history:\n\nLag refers to periods before the treatment in which to match on. Leads refer to periods after the treatment on which to estimate.\n\n\nmatch = PanelMatch(\n  lag                = 4,              # number of pre-periods to match treat history\n  panel.data         = df.panel,       # PanelData generated data\n  lead               = c(0:3),         # how many post-treat dynamic effects to estimate\n  qoi                = \"att\",\n  refinement.method  = \"mahalanobis\",  # set to \"none\" if no covariates\n  match.missing      = T,\n  covs.formula       = ~ covar,        # (optional, can exclude)\n  placebo.test       = T               # (optional, but may cause issues)\n)\n\n\nTo aggregate all the matched comparisons into a singular ATT, we use the PanelEstimate() function.\n\nmatch |&gt;\n  PanelEstimate(\n    panel.data = df.panel,  # PanelData object\n    pooled     = T,         # tells R to calculate ATT\n    moderator  = NULL       # optional. character string for var to calculate heterogenous effects\n  ) |&gt;\n  print()\n\n#&gt; Point estimates:\n#&gt; [1] -3.617353\n#&gt; Standard errors:\n#&gt; [1] 0.5789263\n\n\nThe Point estimates are the estimated ATT, and the standard errors are provided.\n\nWe can estimate dynamic treatment effects with the PanelEstimate() function:\n\nmatch |&gt;\n  PanelEstimate(\n    panel.data = df.panel,  # PanelData object\n    pooled     = F          # tells R to calculate dynamic effects\n  ) |&gt;\n  plot(\n    ylab = \"Estimate\",            # y-axis label\n    xlab = \"Time to Treatment\",   # x-axis label\n    main = \"Dynamic Effects\"      # title of plot\n  )\n\n\n\n\n\n\n\n\n\nWe can conduct pre-treatment period placebo tests (pre-treatment effects to test for parallel trends) as well. These are done with the placebo_test() function.\n\nmatch |&gt; placebo_test(\n  panel.data = df.panel,  # PanelData object\n  lag.in     = 4,         # should equal lag in PanelMatch()\n  plot       = T\n)\n\n\n\n\n\n\n\n\nNote: the estimate for the last pre-treatment period (t-1) is always 0, so it is not displayed.",
    "crumbs": [
      "PanelMatch"
    ]
  },
  {
    "objectID": "did2s.html",
    "href": "did2s.html",
    "title": "did2s",
    "section": "",
    "text": "R package for 2-stage DiD estimator (Gardner 2021)\n\ndid2s is a package that implements the 2-stage DiD estimator proposed by Gardner (2021) that solves the bias of the TWFE in staggered settings. Documentation can be found here.\nInstall the package as follows:\n\ninstall.packages('did2s')\n\n\n\nsample code\nStart by loading packages and the data:\n\nlibrary(did2s)\nlibrary(ggfixest)  # for plotting\nlibrary(readr)  # for importing data\ndf = read_csv('df.csv')\n\n\nWe use the did2s() function to run the did2s estimation for the ATT.\n\nThe first_stage = should contain all covariates and fixed effects. If no covariates, the formula should be ~ 0 | id + time. The second_stage = should only contain the treatment variable.\n\n\nmod = did2s(\n  data          = df,\n  yname         = \"outcome\",\n  first_stage   = ~ covar | id + time,  # if no covar, see above\n  second_stage  = ~ i(treat),\n  treatment     = \"treat\",\n  cluster_var   = \"id\"                  # clustered se var\n)\nmod |&gt; summary()\n\n#&gt; OLS estimation, Dep. Var.: outcome\n#&gt; Observations: 950\n#&gt; Standard-errors: Custom \n#&gt;               Estimate   Std. Error  t value Pr(&gt;|t|)    \n#&gt; treat::0 -3.000000e-17 1.260000e-17 -2.38496 0.017276 *  \n#&gt; treat::1 -1.091429e+00 4.763818e-01 -2.29108 0.022177 *  \n#&gt; ---\n#&gt; Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#&gt; RMSE: 2.0478   Adj. R2: 0.04683\n\n\nThe coefficient of treat::1 is our estimate of the ATT - the causal effect of treatment on those who receive the treatment.\n\nWe still use the did2s() function to run the event study model, but we alter the second-stage of the model. We then use the ggiplot() function to plot our results.\n\nmod = did2s(\n  data          = df,\n  yname         = \"outcome\",\n  first_stage   = ~ covar | id + time,             # if no covar, see notes\n  second_stage  = ~ i(rel.time, ref = -1),  # see notes for group\n  treatment     = \"treat\",\n  cluster_var   = \"id\"                             # clustered se\n)\n\nmod |&gt; ggiplot(\n  xlab    = \"Time Relative to Treatment\",  # x-axis label\n  ylab    = \"Dynamic ATT Estimate\",        # y-axis label\n  main    = \"Dynamic Treatment Effects\",   # title for plot\n) +\n  xlim(-8, 8) # select how many periods to display",
    "crumbs": [
      "did2s"
    ]
  },
  {
    "objectID": "impute.html",
    "href": "impute.html",
    "title": "didimputation",
    "section": "",
    "text": "R package for the imputation estimator (Borusyak et al 2021)\n\ndidimputation is a package that implements the imputation DiD estimator proposed by Borusyak, Jaravel, and Speiss (2021) that solves the issues with TWFE in staggered settings. Documentation can be found here.\nInstall the package as follows:\n\ninstall.packages('didimputation')\n\n\n\nsample code\nStart by loading packages and the data:\n\nlibrary(didimputation)\nlibrary(ggplot2)  # for plotting\nlibrary(readr)    # for importing data\ndf = read_csv('df.csv')\n\n\nWe use the did_imputation() function to run the model.\n\nmod = did_imputation(\n  data         = df,\n  yname        = \"outcome\",\n  gname        = \"cohort\",\n  tname        = \"time\",\n  idname       = \"id\",\n  first_stage  = ~ covar | id + time  # can delete entire arg if no covars\n)\n\nmod |&gt; print()\n\n#&gt; # A tibble: 1 × 6\n#&gt;   lhs     term  estimate std.error conf.low conf.high\n#&gt;   &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n#&gt; 1 outcome treat    -1.09     0.127    -1.34    -0.842\n\n\n\nWe can also estimate event-study dynamic effects for pre and post-treatment periods.\n\nmod = did_imputation(\n  data         = df,\n  yname        = \"outcome\",\n  gname        = \"cohort\",\n  tname        = \"time\",\n  idname       = \"id\",\n  first_stage  = ~ covar | id + time,  # can delete entire arg if no covars\n  horizon = T,                         # do not change\n  pretrends = -4:-1                    # how many pre-treatment period to include\n)\n\nThere is no simple way to plot this, so we will have to manually do so.\n\n# convert output into table\ntbl = mod |&gt; as.data.table()\n\n# filter for only treatment coefficients\ntbl$term = tbl$term |&gt; as.numeric()\ntbl = tbl |&gt; na.omit()\n\n# ggplot\ntbl |&gt;\n  ggplot(aes(x = term, y = estimate)) +\n  geom_vline(xintercept = -0.5, linetype = 3) +  # vertical line at treatment +\n  geom_hline(yintercept = 0) +  # horizontal line at 0 effect\n  geom_point() +  # plot treatment effects\n  geom_linerange(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +  # conf intervals\n  labs(title = \"Dynamic Treatment Effects\") +\n  xlab(\"Time to Treatment\") +\n  ylab(\"Estimate\") +\n  theme_bw()",
    "crumbs": [
      "didimputation"
    ]
  },
  {
    "objectID": "etwfe.html",
    "href": "etwfe.html",
    "title": "etwfe",
    "section": "",
    "text": "R package for extended-twfe (Wooldridge 2021, 2023)\n\netwfe is a package that implements the extended twfe estimator proposed by Wooldridge (2021, 2023) that solves the bias of the TWFE in staggered settings. Documentation can be found here.\nInstall the package as follows:\n\ninstall.packages('etwfe')\n\n\n\nsample code\nStart by loading packages and the data:\n\nlibrary(etwfe)\nlibrary(readr)  # for importing data\ndf = read_csv('df.csv')\n\n\nWe use the etwfe() function to estimate the etwfe model:\n\nmod = etwfe(\n  fml     = outcome ~ covar,  # see notes for no covar\n  tvar    = time,\n  gvar    = cohort,\n  data    = df,\n  vcov    = ~ id,\n  family  = NULL              # can change to \"logit\", \"negbin\", \"poisson\"\n)\n\n\nWe can use the emfx() function to aggregate our heterogenous effects into a singular ATT.\n\nmod |&gt; emfx(type = \"simple\")\n\n#&gt; \n#&gt;  .Dtreat Estimate Std. Error     z Pr(&gt;|z|)    S 2.5 % 97.5 %\n#&gt;     TRUE    -1.21      0.148 -8.23   &lt;0.001 52.2  -1.5 -0.925\n#&gt; \n#&gt; Term: .Dtreat\n#&gt; Type:  response \n#&gt; Comparison: TRUE - FALSE\n\n\nThe estimate for TRUE is our ATT, and the p-value is given by Pr(&gt;|Z|).\n\nWe can use the emfx() function to aggregate dynamic treatment effects. We can then plot these effects with the plot() function.\n\nmod |&gt;\n  emfx(type = \"event\") |&gt;\n  plot()\n\n\n\n\n\n\n\n\nNote that etwfe cannot estimate pre-treatment effects.\n\nIf we are interested in how the ATT differs by year of treatment adoption, we can also aggregate effects by initial treatment period group. We can then plot these effects with the plot() function:\n\nmod |&gt;\n  emfx(type = \"group\") |&gt;\n  plot()",
    "crumbs": [
      "etwfe"
    ]
  },
  {
    "objectID": "pyfixest.html",
    "href": "pyfixest.html",
    "title": "pyfixest",
    "section": "",
    "text": "Python package for TWFE, 2-stage DiD (Gardner 2021), and interaction-weighted (Sun and Abraham 2021).\n\npyfixest is a port of the fixest package for python, with slighty different syntax and offerings. pyfixest can implement the standard TWFE estimator, the 2-stage DiD estimator proposed by Gardner (2021), and the interaction-weighted estimator proposed by Sun and Abraham (2021). Documentation can be found here.\nInstall the package by inputting the following into the terminal:\n\npip install -U pyfixest\n\n\n\nsample code\nStart by loading packages and the data:\n\nimport pyfixest as pf\nimport pandas as pd\ndf = pd.read_csv('df.csv')\n\n\nWe can use the pf.feols() function to run the TWFE estimation for the ATT:\n\nmod = pf.feols(\n  fml   = \"outcome ~ treat + covar | id + time\",\n  data  = df,\n  vcov  = {\"CRV1\": \"id\"},  # change \"id\", do not touch \"CRV1\"\n)\nmod.summary()\n\n#&gt; ###\n#&gt; \n#&gt; Estimation:  OLS\n#&gt; Dep. var.: outcome, Fixed effects: id+time\n#&gt; Inference:  CRV1\n#&gt; Observations:  950\n#&gt; \n#&gt; | Coefficient   |   Estimate |   Std. Error |   t value |   Pr(&gt;|t|) |   2.5% |   97.5% |\n#&gt; |:--------------|-----------:|-------------:|----------:|-----------:|-------:|--------:|\n#&gt; | treat         |     -3.683 |        0.361 |   -10.200 |      0.000 | -4.400 |  -2.966 |\n#&gt; | covar         |      1.018 |        0.032 |    31.414 |      0.000 |  0.954 |   1.083 |\n#&gt; ---\n#&gt; RMSE: 1.609 R2: 0.725 R2 Within: 0.623\n\n\n\nDynamic treatment effects for a TWFE event study can be calculated as follows, but there is no quick plot option:\n\nmod = pf.feols(\n  fml   = \"outcome ~ i(rel_time, group, ref = -1) + covar | id + time\",\n  data  = df,\n  vcov  = {\"CRV1\": \"id\"},  # change \"id\", do not touch \"CRV1\"\n)\nmod.tidy().head()  # .head() because output is long, remove for full output\n\n#&gt;                                                  Estimate  ...     97.5%\n#&gt; Coefficient                                                ...          \n#&gt; covar                                            1.012549  ...  1.052697\n#&gt; C(rel_time, contr.treatment(base=-1))[-9]:group  1.798499  ...  2.481064\n#&gt; C(rel_time, contr.treatment(base=-1))[-8]:group  1.065690  ...  1.680437\n#&gt; C(rel_time, contr.treatment(base=-1))[-7]:group  1.214181  ...  1.997759\n#&gt; C(rel_time, contr.treatment(base=-1))[-6]:group  1.076372  ...  1.787558\n#&gt; \n#&gt; [5 rows x 6 columns]\n\n\n\nWe can estimate the ATT using the 2-stage difference-in-differences method (Gardner) using the pf.did2s() function. The syntax is almost identical to that of did2s.\n\nThe first_stage = should contain all covariates and fixed effects. If no covariates, the formula should be \"~ 0 | id + time\". The second_stage = should only contain the treatment variable.\n\n\nmod = pf.did2s(\n  data          = df, \n  yname         = \"outcome\",\n  first_stage   = \"~ covar | id + time\",  # if no covar, see above\n  second_stage  = \"~ i(treat)\",\n  treatment     = \"treat\",\n  cluster       = \"id\",                   # clustered se var\n)\nmod.summary()\n\n#&gt; ###\n#&gt; \n#&gt; Estimation:  DID2S\n#&gt; Dep. var.: outcome_hat, Fixed effects: 0\n#&gt; Inference:  CRV1 (GMM)\n#&gt; Observations:  950\n#&gt; \n#&gt; | Coefficient      |   Estimate |   Std. Error |   t value |   Pr(&gt;|t|) |   2.5% |   97.5% |\n#&gt; |:-----------------|-----------:|-------------:|----------:|-----------:|-------:|--------:|\n#&gt; | C(treat)[T.True] |     -1.091 |        0.476 |    -2.291 |      0.022 | -2.026 |  -0.157 |\n#&gt; ---\n#&gt; RMSE: 2.048 R2: 0.049\n\n\n\nWe use the pf.event_study() function to estimate the dynamic ATTs using the interaction-weighted estimator by Sun and Abraham.\n\nmod = pf.event_study(\n  data       = df, \n  yname      = \"outcome\",\n  idname     = \"id\",\n  tname      = \"time\",\n  gname      = \"cohort\",\n  xfml       = \"covar\",      # can drop if no covar. Form: covar1 + covar2 ...\n  estimator  = \"saturated\",  # don't change\n)\nmod.iplot_aggregate()\n\n\n\n\n\n\n\n\nThere is no method to aggregate the dynamic effects into a singular overall ATT for sun and abraham.",
    "crumbs": [
      "pyfixest"
    ]
  },
  {
    "objectID": "csdid.html",
    "href": "csdid.html",
    "title": "csdid",
    "section": "",
    "text": "Python package for doubly-robust and ipw DiD estimator (callaway and sant’anna 2021)\n\ncsdid is a package that implements the DiD estimators proposed by Callaway and Sant’Anna (2021) that solves the bias of the TWFE estimator in staggered DiD. Documentation can be found here.\nInstall the package by inputting the following into the terminal:\n\npip install csdid\npip install git+https://github.com/d2cml-ai/DRDID\n\n\n\nsample code\nStart by loading packages and the data:\n\nfrom csdid.att_gt import ATTgt\nimport pandas as pd\ndf = pd.read_csv('df.csv')\n\n\nWe first create the estimation object with the ATTgt() function, then fit the model with the .fit() method.\n\nNote: id variable should be transformed to an integer variable before starting. Set cohort = 0 for never-treated units.\n\n\ncsdid = ATTgt(\n  yname          = \"outcome\",\n  gname          = \"cohort\",            # cohort = 0 for never-treated\n  idname         = \"id\",                # must be a integer-variable\n  tname          = \"time\",\n  xformla        = f\"outcome ~ covar\",  # (optional)\n  control_group  = \"notyettreated\",     # use \"nevertreated\" if large sample\n  data           = df,\n)\n\nmod = csdid.fit(est_method = 'dr')  # switch to ipw if issues\n\n\nWe use the aggte() method to aggregate our matched treatment effects into an overall treatment effect.\n\nmod.aggte(typec = 'simple')\n\n#&gt; \n#&gt; \n#&gt;     ATT Std. Error  [95.0%  Conf. Int.] \n#&gt; -0.9761     0.4981 -1.9523       0.0001 \n#&gt; \n#&gt; \n#&gt; ---\n#&gt; Signif. codes: `*' confidence band does not cover 0\n#&gt; Control Group:  None , \n#&gt; Anticipation Periods:  0\n#&gt; Estimation Method:  Doubly Robust\n#&gt; \n#&gt; \n#&gt; &lt;csdid.att_gt.ATTgt object at 0x166601160&gt;\n\n\n\nWe can estimate dynamic treatment effects with the .aggte() method and plot with the .plot_aggte() method.\n\nmod.aggte(typec = 'dynamic')\n\n#&gt; \n#&gt; \n#&gt; Overall summary of ATT's based on event-study/dynamic aggregation:\n#&gt;    ATT Std. Error [95.0%  Conf. Int.]  \n#&gt; 0.7669     0.2925 0.1936       1.3402 *\n#&gt; \n#&gt; \n#&gt; Dynamic Effects:\n#&gt;     Event time  Estimate  Std. Error  [95.0% Simult.   Conf. Band   \n#&gt; 0           -7    0.7884      0.4731          -0.1388      1.7157   \n#&gt; 1           -6   -0.7444      0.5398          -1.8023      0.3135   \n#&gt; 2           -5    0.0099      0.3737          -0.7224      0.7423   \n#&gt; 3           -4    0.0249      0.2966          -0.5564      0.6062   \n#&gt; 4           -3    0.1380      0.2902          -0.4308      0.7069   \n#&gt; 5           -2    0.3772      0.3047          -0.2199      0.9744   \n#&gt; 6           -1   -0.0628      0.2655          -0.5832      0.4575   \n#&gt; 7            0   -4.8345      0.4068          -5.6319     -4.0371  *\n#&gt; 8            1   -3.5553      0.4058          -4.3506     -2.7601  *\n#&gt; 9            2   -2.0860      0.3939          -2.8581     -1.3139  *\n#&gt; 10           3   -0.3910      0.5801          -1.5280      0.7459   \n#&gt; 11           4    0.8165      0.4844          -0.1329      1.7658   \n#&gt; 12           5    1.9183      0.7371           0.4736      3.3629  *\n#&gt; 13           6    4.8726      0.3298           4.2262      5.5189  *\n#&gt; 14           7    4.5839      0.3483           3.9012      5.2666  *\n#&gt; 15           8    5.5782      0.6655           4.2739      6.8825  *\n#&gt; ---\n#&gt; Signif. codes: `*' confidence band does not cover 0\n#&gt; Control Group:  None , \n#&gt; Anticipation Periods:  0\n#&gt; Estimation Method:  Doubly Robust\n#&gt; \n#&gt; \n#&gt; &lt;csdid.att_gt.ATTgt object at 0x166601160&gt;\n\nmod.plot_aggte()\n\n\n\n\n\n\n\n\n\nWe can also aggregate effects by initial treatment period group, and with the ggdid() function:\n\nmod.aggte(typec = 'group')\n\n#&gt; \n#&gt; \n#&gt; Overall summary of ATT's based on group/cohort aggregation:\n#&gt;     ATT Std. Error  [95.0%  Conf. Int.]  \n#&gt; -2.2754     0.1918 -2.6513      -1.8994 *\n#&gt; \n#&gt; \n#&gt; Group Effects:\n#&gt;    Group  Estimate  Std. Error  [95.0% Simult.   Conf. Band   \n#&gt; 0      2    2.0844      0.2990           1.4984      2.6704  *\n#&gt; 1      3    1.3054      0.5137           0.2986      2.3122  *\n#&gt; 2      4    1.1756      0.5498           0.0980      2.2531  *\n#&gt; 3      5   -2.9813      0.3893          -3.7443     -2.2184  *\n#&gt; 4      6   -2.8821      0.7177          -4.2887     -1.4755  *\n#&gt; 5      7   -4.5846      0.7974          -6.1475     -3.0218  *\n#&gt; 6      8   -5.1020      0.3991          -5.8842     -4.3197  *\n#&gt; 7      9   -7.2184      0.4263          -8.0540     -6.3829  *\n#&gt; ---\n#&gt; Signif. codes: `*' confidence band does not cover 0\n#&gt; Control Group:  None , \n#&gt; Anticipation Periods:  0\n#&gt; Estimation Method:  Doubly Robust\n#&gt; \n#&gt; \n#&gt; &lt;csdid.att_gt.ATTgt object at 0x166601160&gt;\n\nmod.plot_aggte()",
    "crumbs": [
      "csdid"
    ]
  }
]