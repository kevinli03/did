# Interaction-Weighted

##### Sun and Abraham (2021)

### What is the IW Estimator?

The Interaction-Weighted (IW) estimator, also known as **sunab**, is an estimator for DiD that solves the issues with TWFE in staggered settings. The estimator was proposed by Sun and Abraham (2021).

IW is a **matching and reweighting estimator** for DiD, with the matching part solving the "forbidden comparisons" problem of TWFE, and the reweighting part solving the "negative weighting" problem of TWFE.

First, the IW estimator "matches" treated units to control units in correct non-forbidden comparisons. It does this by separating all treated units into groups, grouped by their initial treatment year. Then, for group, IW compares treated vs. untreated for every year. This "matching" is done via interactions in regression:

$$
Y_{it} = \underbrace{\alpha_i + \gamma_t}_\text{fixed effects} + \underbrace{\sum_g \sum_{r â‰  -1} 1\{G_i = g\} \cdot 1\{R_{it} = r\} \cdot \tau_{gr}}_\text{comparisons for each group g and rel.time r} + \cov + \eps_{it}
$$

::: small
$G_i$ is a categorical variable that describes which initial treatment period unit $i$ received treatment. $R_{it}$ is a relative-time variable. Essentially, IW is estimating dynamic treatment effects for each initial treatment period group $g$.
:::

This matching will produce many different comparison estimates $\tau_{gr}$. These $\tau_{gr}$ are reweighted together, with weights determined by how many observations fall into each group $g$ and relative time period $r$. The $\tau_{gr}$ can be aggregated into the overall ATT, Dynamic ATT's with all groups combined together, and the overall ATT for each group $g$ separately.

IW does not accommodate non-absorbing treatment. IW is also less flexible with covariates for parallel trends, since the linear model assumes a linear relationship between covariates and outcome (which might not always be realistic).

<br />

### R: Running the Model

```{r}
#| echo: false
#| warning: false
#| message: false

library(fixest)
data(base_stagg, package = "fixest")
df <- base_stagg
colnames(df) <- c("unit", "time", "cohort", "rel.time", "treated", "te", "covar", "outcome")
df$treat <- ifelse(df$rel.time >= 0, 1, 0)
```

Our dataset `df` should be a panel or repeated cross-section, and have the following variables:

| Variable      | Description                                                                                                                                                                                                                |
|------------------|------------------------------------------------------|
| `unit`        | A variable indicating the units/individual an observation belongs to in our data.\*                                                                                                                                        |
| `time`        | A variable indicating time-periods in our study for each observation.                                                                                                                                                      |
| `outcome`     | Outcome variable for each observation.                                                                                                                                                                                     |
| `covar`       | (optional) covariate(s) to condition for parallel trends.                                                                                                                                                                  |
| `first.treat` | This variable indicates the initial year of treatment adoption for each unit. For the never-treated, we should set the value of `first.treat` to a very large positive/negative value that is outside the range of `time`. |

::: small
\*For repeated cross-section, the `unit` variable should be instead the group/level of which treatment is assigned. For example, if treatment is assigned by county/state, use that as the `unit` variable.
:::

::: {.callout-note collapse="true" appearance="simple"}
## Creating a first.treat Variable

If your dataset lacks a first.treat variable, this is how you create one, using the other variables above.

```{r}
#| warning: false
#| message: false

library(tidyverse)

# create first.treat
first.treat <- df %>%
  select(treat, time, unit) %>%
  filter(treat == 1) %>%
  group_by(unit) %>%
  summarise(first.treat = min(time))

# join first.treat to df
df <- left_join(df, first.treat)

# replace NA's (never-treated) in first.treat with big number
df$first.treat <- replace_na(df$first.treat, 10000)
```

::: small
\*For repeated cross-section, the `unit` variable should be instead the group/level of which treatment is assigned. The `treat` variable should also be grouped by the same group/level.
:::
:::

With all the proper variables, we can estimate a IW model with the **fixest** package:

```{r}
library(fixest)

iw <- feols(
  fml = outcome ~
          sunab(first.treat, time) + covar | unit + time,
  data = df,
  vcov = ~unit
)
```

This model has now done the matching and estimating $\tau_{gr}$. We now can choose different ways to aggregate these.

<br />

### R: Aggregating the ATT

To aggregate the matched treatment effects $\tau_{gr}$ into a singular ATT causal estimate for all treated observations, we can use the **aggregate()** function:

```{r}
#| comment: "#>"
#| class-output: r

att <- aggregate(
  x   = iw,    # IW model object
  agg = "att"  # output the ATT
)

print(att)
```

We can see the estimated ATT in the output table, as well as the estimated p-value in `Pr(>|t|)`.

::: {.callout-note collapse="true" appearance="simple"}
## Extract the ATT Directly

If you are interested in extracting the ATT and confidence intervals directly from the att object for tables/figures, you can do the following:

```{r}
#| comment: "#>"
#| class-output: r
#| results: hold

att <- as.data.frame(att)

# extract att
att[1,1]

# extract std. error
att[1,2]
```

::: small
This can be useful if you are making a graph/table comparing different estimators.
:::
:::

<br />

### R: Aggregating Dynamic Effects

We can plot the dynamic treatment effects using the IW object estimated when running the model:

```{r}
#| message: false
#| warning: false
#| eval: false

library(ggfixest)
library(ggplot)

plot <- ggiplot(
  # required options
  object   = iw,                # input your original iw model
  ref.line = FALSE,             # we will add our own line later
  
  # (optional) aesthetic options
  xlab     = "Time Relative to Treatment",       # x-axis label
  ylab     = "Dynamic ATT Estimate",             # y-axis label
  main     = "Dynamic Treatment Effects (IW)",   # title for plot
)

plot +
  # select how many period to display
  xlim(-8, 8) +
  
  # add reference lines for treatment beginning and 0 causal effect
  geom_vline(xintercept = -0.5, linetype = 3) +
  geom_hline(yintercept = 0, linetype = 3, color = "red") +
  
  # ggplot theme (optional, change to your liking)
  theme_bw()

```

```{r}
#| message: false
#| warning: false
#| fig-height: 3
#| echo: false

library(ggdark)
library(ggfixest)

plot <- ggiplot(
  # required options
  object   = iw,           # input your dynamic model name
  ref.line = FALSE,             # we will add our own line later
  
  # optional aesthetic options
  xlab     = "Time Relative to Treatment",  # x-axis label
  ylab     = "Dynamic ATT Estimate",        # y-axis label
  main     = "Dynamic Treatment Effects (IW)",   # title for plot
)

plot +
  xlim(-8, 8) +
  geom_vline(xintercept = -0.5, linetype = 3) +               # add treatment begin line
  geom_hline(yintercept = 0, linetype = 3, color = "red") +  # add 0 effect line
  dark_mode(theme_bw())
```

::: {.callout-note collapse="true" appearance="simple"}
## Finding Exact Dynamic Coefficient Values

If you want exact dynamic coefficient values (to see or for a table), we have to use the aggregate command

```{r}
#| comment: "#>"
#| class-output: r

dynamic <- aggregate(
  x   = iw,       # IW model object
  agg = "period"  # output the dynamic effects
)

head(dynamic) # print(dynamic) to see all the coefficient values
```
:::

<br />

### R: Aggregating Group ATT

If we are interested in how the ATT differs by year of treatment adoption, we can also aggregate effects by initial treatment period group:

```{r}
#| comment: "#>"
#| class-output: r

group <- aggregate(
  x   = iw,       # IW model object
  agg = "cohort"  # output the dynamic effects
)

# print(group) if you want to see the exact group-ATT numbers
```

There isn't a quick way to immediately plot these estimates, but we can manually create a ggplot:

```{r}
#| eval: false

library(tidyverse)

# make group a df
group <- as.data.frame(group)

# add cohort period to group df
group$period <- rownames(group)
group$period <- as.factor(group$period)

# calculate lower and upper conf intervals
group$lower <- group$Estimate - 1.96*group$`Std. Error`
group$upper <- group$Estimate + 1.96*group$`Std. Error`

# ggplot
ggplot(data = group, aes(x = Estimate, y = period)) +
  # vertical line at 0 treatment effect
  geom_vline(xintercept = 0, color = "red", linetype = 3) +
  
  # plot the treatment effects
  geom_point(color = "blue") +
  
  # plot the confidence intervals
  geom_linerange(aes(xmin = lower, xmax = upper), width = 0.2, color = "blue") +
  
  # title (optional)
  labs(title = "Treatment Effects by Initial Treatment Period") +

  # x-axis and y-axis labels (optional)
  xlab("Estimated ATT (IW)") + ylab("Initial Treatment Period") +
  
  # theme (optional, change to your liking)
  theme_bw()
```

```{r}
#| echo: false
#| fig-height: 3.5
#| warning: false

library(tidyverse)

# make group a df
group <- as.data.frame(group)

# add cohort period to group df
group$period <- rownames(group)
group$period <- as.factor(group$period)

# calculate lower and upper conf intervals
group$lower <- group$Estimate - 1.96*group$`Std. Error`
group$upper <- group$Estimate + 1.96*group$`Std. Error`

# ggplot
ggplot(data = group, aes(x = Estimate, y = period)) +
  # vertical line at 0 treatment effect
  geom_vline(xintercept = 0, color = "red", linetype = 3) +
  
  # plot the treatment effects
  geom_point(color = "blue") +
  
  # plot the confidence intervals
  geom_linerange(aes(xmin = lower, xmax = upper), width = 0.2, color = "blue") +
  
  # title
  labs(title = "Treatment Effects by Initial Treatment Period") +

  # x-axis and y-axis labels
  xlab("Estimated ATT (IW)") + ylab("Initial Treatment Period") +
  
  # theme
  dark_mode(theme_bw())

```

<br />

### Additional Resources

Sun, L. and Abraham S. (2021) 'Estimating Dynamic Treatment Effects in Event studies with Heterogenous Treatment Effects', *Journal of Econometrics*, 225(2), pp. 175-199. Available at: <https://arxiv.org/abs/1804.05785>

Additional Links:

-   Fixest documentation for [sunab() function](https://lrberge.github.io/fixest/reference/sunab.html).
-   Fixest documentation for [aggregate() function](https://lrberge.github.io/fixest/reference/aggregate.fixest.html).
-   Asjad Naqvi [page on sunab](https://asjadnaqvi.github.io/DiD/docs/code_r/07_sunab_r/).
